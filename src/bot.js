require("dotenv").config();
const { Telegraf, Scenes, session } = require('telegraf');
const axios = require("axios");

const bot = new Telegraf(process.env.BOT_TOKEN);

let userStates = {}; // –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è



bot.command("start", (ctx) => {
    const userId = ctx.from.id;
    delete userStates[userId]; // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n/register_company - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é\n/request - –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É");
});


/*User request for order*/
bot.command("request", (ctx) => {
    const userId = ctx.from.id;
    userStates[userId] = {step: "material", data: {}};
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª (–õ–î–°–ü/–ú–î–§):");
});

bot.on("message", async (ctx) => {
    const userId = ctx.from.id;
    if (!userStates[userId]) return; // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    const userStep = userStates[userId].step;
    const text = ctx.message.text;
    const photo = ctx.message.photo;


    switch (userStep) {
        case "material":
            userStates[userId].data.material = text;
            userStates[userId].step = "time";
            ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ (–≤ –¥–Ω—è—Ö):")
            break;

        case "time":
            userStates[userId].data.time = text;
            userStates[userId].step = "budget";
            ctx.reply("–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç (–≤ —Ç–µ–Ω–≥–µ):");
            break;

        case "budget":
            userStates[userId].data.budget = text;
            userStates[userId].step = "room";
            ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ (—Å–ø–∞–ª—å–Ω—è, –∫—É—Ö–Ω—è, –±–∞–ª–∫–æ–Ω –∏ —Ç.–¥.):");
            break;

        case "room":
            userStates[userId].data.room = text;
            userStates[userId].step = "photo";
            ctx.reply("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏.");
            break;

        case "photo":
            if (!photo) {
                ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.");
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º file_id —Ñ–æ—Ç–æ
            const fileId = photo[photo.length - 1].file_id;
            userStates[userId].data.photo = fileId;

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
            const requestData = {
                userId: userId,
                material: userStates[userId].data.material,
                time: userStates[userId].data.time,
                budget: userStates[userId].data.budget,
                room: userStates[userId].data.room,
                photo: fileId
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
            try {
                await axios.post("http://localhost:5000/api/requests", requestData);
                ctx.reply("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–µ –º–µ–±–µ–ª—å–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º.");
            } catch (error) {
                ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.");
                console.error(error);
            }

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            delete userStates[userId];
            break;
    }
})
/*User request for order*/


/*Registration company*/
bot.command("register_company", (ctx) => {
    const userId = ctx.from.id;
    userStates[userId] = { step: "name", data: {} };
    ctx.reply("üìõ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:");
});

bot.on("text", async (ctx) => {
    const userId = ctx.from.id;
    if (!userStates[userId]) return; // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    const userStep = userStates[userId].step;
    const text = ctx.message.text.trim(); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

    switch (userStep) {
        case "name":
            userStates[userId].data.name = text;
            userStates[userId].step = "region";
            ctx.reply("üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω —Ä–∞–±–æ—Ç—ã:");
            break;

        case "region":
            userStates[userId].data.region = text;
            userStates[userId].step = "channel";
            ctx.reply("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä: `-1001234567890`):");
            break;

        case "channel":
            if (!text.startsWith("-100")) {
                ctx.reply("‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.");
                return;
            }

            userStates[userId].data.channel = text;

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–∏
            const companyData = {
                userId: userId,
                name: userStates[userId].data.name,
                region: userStates[userId].data.region,
                channel: text
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
            try {
                await axios.post("http://localhost:5000/api/companies", companyData);
                ctx.reply(`‚úÖ –ö–æ–º–ø–∞–Ω–∏—è *${companyData.name}* –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!`, { parse_mode: "Markdown" });
            } catch (error) {
                ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏.");
                console.error(error);
            }

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            delete userStates[userId];
            break;
    }
});




bot.launch().then(() => console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"));

bot.telegram.setMyCommands([
    { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
    { command: 'leave_request', description: 'üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–µ–±–µ–ª—å' },
    { command: 'register_company', description: 'üè¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–±–µ–ª—å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é' },
    { command: 'my_company', description: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏' },
    { command: 'help', description: '‚ùì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' }
]);

module.exports = bot;
