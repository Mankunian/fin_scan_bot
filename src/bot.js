require("dotenv").config();
const { Telegraf } = require("telegraf");
const axios = require("axios");

const bot = new Telegraf(process.env.BOT_TOKEN);

let userStates = {}; // –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

bot.command("start", (ctx) => {
    const userId = ctx.from.id;
    delete userStates[userId]; // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n/register_company - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é\n/request - –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É");
});

/* –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ */
bot.command("register_company", (ctx) => {
    const userId = ctx.from.id;
    userStates[userId] = { step: "name", data: {} };
    ctx.reply("üìõ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
bot.on("message", async (ctx) => {
    const userId = ctx.from.id;
    if (!userStates[userId]) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    const userStep = userStates[userId].step;
    const text = ctx.message.text ? ctx.message.text.trim() : null; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if (!text) {
        ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
        return;
    }

    switch (userStep) {
        case "name":
            userStates[userId].data.name = text;
            userStates[userId].step = "region";
            ctx.reply("üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω —Ä–∞–±–æ—Ç—ã:");
            break;

        case "region":
            userStates[userId].data.region = text;
            userStates[userId].step = "channel";
            ctx.reply("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä: `-1001234567890`):");
            break;

        case "channel":
            if (!text.startsWith("-100")) {
                ctx.reply("‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä: `-1001234567890`).");
                return;
            }

            userStates[userId].data.channel = text;

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–∏
            const companyData = {
                userId: userId,
                name: userStates[userId].data.name,
                region: userStates[userId].data.region,
                channel: text
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
            try {
                await axios.post("http://localhost:5000/api/companies", companyData);
                ctx.reply(`‚úÖ –ö–æ–º–ø–∞–Ω–∏—è *${companyData.name}* –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!`, { parse_mode: "Markdown" });
            } catch (error) {
                ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏.");
                console.error(error);
            }

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            delete userStates[userId];
            break;
    }
});

bot.launch().then(() => console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"));

bot.telegram.setMyCommands([
    { command: "start", description: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
    { command: "request", description: "üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–µ–±–µ–ª—å" },
    { command: "register_company", description: "üè¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–±–µ–ª—å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é" },
    { command: "my_company", description: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏" },
    { command: "help", description: "‚ùì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" }
]);

module.exports = bot;
